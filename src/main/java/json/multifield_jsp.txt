package org.apache.jsp.apps.obesity.patient.common.components.formcomponents.radioinlinerequired.multifield;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.adobe.granite.ui.components.Config;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.adobe.granite.ui.components.Value;
import org.apache.commons.lang3.StringUtils;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ValueMap;
import com.adobe.granite.ui.components.ComponentHelper;
import com.adobe.granite.xss.XSSAPI;
import com.day.cq.i18n.I18n;
import org.apache.sling.commons.json.JSONArray;
import org.apache.sling.commons.json.JSONObject;
import java.util.LinkedHashMap;
import java.util.*;

public final class multifield_jsp extends org.apache.sling.scripting.jsp.jasper.runtime.HttpJspBase
        implements org.apache.sling.scripting.jsp.jasper.runtime.JspSourceDependent {


    /**
     * A shortcut for <code>xssAPI.encodeForHTML(i18n.getVar(text))</code>.
     */
    private final String outVar(XSSAPI xssAPI, I18n i18n, String text) {
        return xssAPI.encodeForHTML(i18n.getVar(text));
    }

    /**
     * A shortcut for <code>xssAPI.encodeForHTMLAttr(i18n.getVar(text))</code>.
     */
    private final String outAttrVar(XSSAPI xssAPI, I18n i18n, String text) {
        return xssAPI.encodeForHTMLAttr(i18n.getVar(text));
    }


    private final Logger mLog = LoggerFactory.getLogger(this.getClass());

    private static final JspFactory _jspxFactory = JspFactory.getDefaultFactory();

    private static java.util.List _jspx_dependants;

    static {
        _jspx_dependants = new java.util.ArrayList(3);
        _jspx_dependants.add("/libs/granite/ui/global.jsp");
        _jspx_dependants.add("tld:http://sling.apache.org/taglibs/sling");
        _jspx_dependants.add("tld:http://www.adobe.com/taglibs/granite/ui/1.0");
    }

    private org.apache.sling.scripting.jsp.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody;
    private org.apache.sling.scripting.jsp.jasper.runtime.TagHandlerPool _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody;

    private javax.el.ExpressionFactory _el_expressionfactory;
    private org.apache.sling.scripting.jsp.jasper.runtime.AnnotationProcessor _jsp_annotationprocessor;

    public Object getDependants() {
        return _jspx_dependants;
    }

    public void _jspInit() {
        _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody = org.apache.sling.scripting.jsp.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
        _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody = org.apache.sling.scripting.jsp.jasper.runtime.TagHandlerPool.getTagHandlerPool(getServletConfig());
        _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        _jsp_annotationprocessor = (org.apache.sling.scripting.jsp.jasper.runtime.AnnotationProcessor) getServletConfig().getServletContext().getAttribute(org.apache.sling.scripting.jsp.jasper.runtime.AnnotationProcessor.class.getName());
    }

    public void _jspDestroy() {
        _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody.release();
        _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody.release();
    }

    public void _jspService(HttpServletRequest request, HttpServletResponse response)
            throws java.io.IOException, ServletException {

        PageContext pageContext = null;
        ServletContext application = null;
        ServletConfig config = null;
        JspWriter out = null;
        Object page = this;
        JspWriter _jspx_out = null;
        PageContext _jspx_page_context = null;


        try {
            response.setContentType("text/html");
            pageContext = _jspxFactory.getPageContext(this, request, response,
                    null, false, 8192, true);
            _jspx_page_context = pageContext;
            application = pageContext.getServletContext();
            config = pageContext.getServletConfig();
            out = pageContext.getOut();
            _jspx_out = out;

            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");








            //  sling:defineObjects
            org.apache.sling.scripting.jsp.taglib.DefineObjectsTag _jspx_th_sling_005fdefineObjects_005f0 = (org.apache.sling.scripting.jsp.taglib.DefineObjectsTag) _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody.get(org.apache.sling.scripting.jsp.taglib.DefineObjectsTag.class);
            _jspx_th_sling_005fdefineObjects_005f0.setPageContext(_jspx_page_context);
            _jspx_th_sling_005fdefineObjects_005f0.setParent(null);
            int _jspx_eval_sling_005fdefineObjects_005f0 = _jspx_th_sling_005fdefineObjects_005f0.doStartTag();
            if (_jspx_th_sling_005fdefineObjects_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
                _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody.reuse(_jspx_th_sling_005fdefineObjects_005f0);
                return;
            }
            _005fjspx_005ftagPool_005fsling_005fdefineObjects_005fnobody.reuse(_jspx_th_sling_005fdefineObjects_005f0);
            org.apache.sling.api.SlingHttpServletRequest slingRequest = null;
            org.apache.sling.api.SlingHttpServletResponse slingResponse = null;
            org.apache.sling.api.resource.Resource resource = null;
            javax.jcr.Node currentNode = null;
            org.apache.sling.api.resource.ResourceResolver resourceResolver = null;
            org.apache.sling.api.scripting.SlingScriptHelper sling = null;
            org.slf4j.Logger log = null;
            org.apache.sling.api.scripting.SlingBindings bindings = null;
            slingRequest = (org.apache.sling.api.SlingHttpServletRequest) _jspx_page_context.findAttribute("slingRequest");
            slingResponse = (org.apache.sling.api.SlingHttpServletResponse) _jspx_page_context.findAttribute("slingResponse");
            resource = (org.apache.sling.api.resource.Resource) _jspx_page_context.findAttribute("resource");
            currentNode = (javax.jcr.Node) _jspx_page_context.findAttribute("currentNode");
            resourceResolver = (org.apache.sling.api.resource.ResourceResolver) _jspx_page_context.findAttribute("resourceResolver");
            sling = (org.apache.sling.api.scripting.SlingScriptHelper) _jspx_page_context.findAttribute("sling");
            log = (org.slf4j.Logger) _jspx_page_context.findAttribute("log");
            bindings = (org.apache.sling.api.scripting.SlingBindings) _jspx_page_context.findAttribute("bindings");


            final ComponentHelper cmp = new ComponentHelper(pageContext);
            final I18n i18n = cmp.getI18n();
            final XSSAPI xssAPI = cmp.getXss();


            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("\n");
            out.write("org.apache.sling.scripting.jsp.taglib\n");
            out.write("\n");
            out.write('\n');
            if (_jspx_meth_sling_005finclude_005f0(_jspx_page_context))
                return;
            out.write('\n');
            out.write('\n');
            out.write('\n');
            out.write('\n');

            Config mCfg = cmp.getConfig();

            Resource mField = mCfg.getChild("field");

            if (mField == null) {
                mLog.warn("Field node doesn't exist");
                return;
            }

            Resource mItems = mCfg.getChild("field/items/column/items");

            if (mItems == null) {
                mLog.warn("Fields node doesn't exist");
                return;
            }

            Iterator<Resource> children = mItems.listChildren();

            if (children == null) {
                mLog.warn("children node doesn't exist");
                return;
            }

            List<String> fieldKeys = new ArrayList<String>();
            while (children.hasNext()) {
                Resource child = children.next();
                fieldKeys.add(child.getName());
            }

            ValueMap mVM = mField.adaptTo(ValueMap.class);

            String mName = mVM.get("name", "");

            if ("".equals(mName)) {
                mLog.warn("name property doesn't exist on field node");
                return;
            }

            Value mValue = ((ComponentHelper) cmp).getValue();

            List<String[]> fieldValues = new ArrayList<String[]>();
            for(String field: fieldKeys){
                fieldValues.add(mValue.get(field, String[].class));
            }

            if(fieldValues == null){
                mLog.warn("fieldValues doesn't exist on field node");
                return;
            }


            Map item_root = new LinkedHashMap();
//Iterator<String[]> itr = fieldValues.iterator();
            JSONArray jArry = new JSONArray();

            mLog.warn("DDDDD " + fieldValues.get(0).length);

            JSONObject jObjd = null;

            for (int i=0; i <fieldValues.get(0).length; i++) {
                mLog.warn("TTTTT  Six" + fieldKeys.size());
                for (int j = 0; j < fieldKeys.size(); j++) {
                    item_root.put(fieldKeys.get(j),fieldValues.get(j)[i]);
                    mLog.warn("YYYY  Six" + fieldKeys.size());
                }
                jObjd = new JSONObject(item_root);
                jArry.put(jObjd);
            }

            mLog.warn("ZZZZ  Six" + fieldKeys.size());
//String[] pages = mValue.get("radioOptions", String[].class);
//  String[] paths = mValue.get("radioOptionValues", String[].class);




            out.write("\n");
            out.write("\n");
            out.write("<script>\n");
            out.write("\n");
            out.write("    $(document).ready(function () {\n");
            out.write("        debugger;\n");
            out.write("\n");
            out.write("        addDataInFields('");
            out.print(mName);
            out.write('\'');
            out.write(',');
            out.print(jArry.toString());
            out.write(");\n");
            out.write("        collectDataFromFields('");
            out.print(mName);
            out.write("');\n");
            out.write("    });\n");
            out.write("\n");
            out.write("\n");
            out.write("</script>");
        } catch (Throwable t) {
            if (!(t instanceof SkipPageException)){
                out = _jspx_out;
                if (out != null && out.getBufferSize() != 0)
                    try { out.clearBuffer(); } catch (java.io.IOException e) {}
                if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
            }
        } finally {
            _jspxFactory.releasePageContext(_jspx_page_context);
        }
    }

    private boolean _jspx_meth_sling_005finclude_005f0(PageContext _jspx_page_context)
            throws Throwable {
        PageContext pageContext = _jspx_page_context;
        JspWriter out = _jspx_page_context.getOut();
        //  sling:include
        org.apache.sling.scripting.jsp.taglib.IncludeTagHandler _jspx_th_sling_005finclude_005f0 = (org.apache.sling.scripting.jsp.taglib.IncludeTagHandler) _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody.get(org.apache.sling.scripting.jsp.taglib.IncludeTagHandler.class);
        _jspx_th_sling_005finclude_005f0.setPageContext(_jspx_page_context);
        _jspx_th_sling_005finclude_005f0.setParent(null);
        // /apps/obesity/patient/common/components/formcomponents/radioinlinerequired/multifield/multifield.jsp(14,0) name = resourceType type = null reqTime = true required = false fragment = false deferredValue = false expectedTypeName = null deferredMethod = false methodSignature = null
        _jspx_th_sling_005finclude_005f0.setResourceType("/libs/granite/ui/components/foundation/form/multifield");
        int _jspx_eval_sling_005finclude_005f0 = _jspx_th_sling_005finclude_005f0.doStartTag();
        if (_jspx_th_sling_005finclude_005f0.doEndTag() == javax.servlet.jsp.tagext.Tag.SKIP_PAGE) {
            _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody.reuse(_jspx_th_sling_005finclude_005f0);
            return true;
        }
        _005fjspx_005ftagPool_005fsling_005finclude_005fresourceType_005fnobody.reuse(_jspx_th_sling_005finclude_005f0);
        return false;
    }
}
